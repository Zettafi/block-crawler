from unittest import TestCase

from hexbytes import HexBytes

from blockrail.blockcrawler.evm.types import EVMLog, EVMTransactionReceipt, EVMBlock


class LogTestCase(TestCase):
    def test_equal_values_are_equal(self):
        left = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertEqual(left, right, "Expected objects to be equal")

    def test_different_removed_is_unequal(self):
        left = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = EVMLog(
            removed=False,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_log_index_is_unequal(self):
        left = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = EVMLog(
            removed=True,
            log_index="0x11",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_transaction_index_is_unequal(self):
        left = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x22",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_transaction_hash_is_unequal(self):
        left = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x2222"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_block_hash_is_unequal(self):
        left = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="other block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_block_number_is_unequal(self):
        left = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x33",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_address_is_unequal(self):
        left = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the other address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_data_is_unequal(self):
        left = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the other data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_topics_size_is_unequal(self):
        left = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_topic_values_is_unequal(self):
        left = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = EVMLog(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash=HexBytes("0x1111"),
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 3", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")


class TransactionReceiptTestCase(TestCase):
    def test_equal_values_are_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertEqual(left, right, "Expected objects to be equal")

    def test_different_transaction_hash_is_not_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x2222"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_transaction_index_is_not_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x0101",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_block_hash_is_not_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="other block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_block_number_is_not_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x0202",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_from_is_not_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="other from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_to_is_not_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="other to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_cumulative_gas_used_is_not_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x0303",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_gas_used_is_not_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x0404",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_contract_address_is_not_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the other contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_logs_is_not_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=False,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_logs_bloom_is_not_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the other logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_root_is_not_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the other root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_status_is_not_equal(self):
        left = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = EVMTransactionReceipt(
            transaction_hash=HexBytes("0x1111"),
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                EVMLog(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash=HexBytes("0x1111"),
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                EVMLog(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash=HexBytes("0x1112"),
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x01",
        )
        self.assertNotEqual(left, right)


class EVMBlockTestCase(TestCase):
    def test_equal_attrs_is_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes("0x1111"), HexBytes("0x1112")],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes("0x1111"), HexBytes("0x1112")],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertEqual(left, right)

    def test_different_number_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x50",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[
                HexBytes(HexBytes("0x1111")),
                HexBytes(HexBytes("0x1112")),
            ],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_hash_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="other hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_parent_hash_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="other parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_nonce_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="other nonce",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_sha3_uncles_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="other sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_logs_bloom_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x40",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_transaction_root_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="other transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_state_root_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="other state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_receipts_root_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="other receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_miner_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="other miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_mix_hash_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="other mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_difficulty_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x10",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_total_difficulty_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="other total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_extra_data_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="other extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_size_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x60",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_gas_limit_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x20",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_gas_used_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x30",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_timestamp_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x70",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_transactions_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1112")), HexBytes(b"tx hash 3")],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_uncles_is_not_equal(self):
        left = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 2", "uncle hash 3"],
        )
        right = EVMBlock(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=[HexBytes(HexBytes("0x1111")), HexBytes(HexBytes("0x1112"))],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)
