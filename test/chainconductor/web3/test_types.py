import unittest

from chainconductor.web3.types import HexInt, Block, Transaction


class HexIntTestCase(unittest.TestCase):
    def test_equal_hex_str_is_equal(self):
        self.assertEqual(HexInt("0x1"), HexInt("0x1"))

    def test_unequal_hex_str_is_not_equal(self):
        self.assertNotEqual(HexInt("0x1"), HexInt("0x0"))

    def test_hex_value_is_original(self):
        self.assertEqual("0x1", HexInt("0x1").hex_value)

    def test_int_value_is_correct(self):
        self.assertEqual(1, HexInt("0x1").int_value)

    def test_str_is_original(self):
        self.assertEqual("0x1", str(HexInt("0x1")))

    def test_hash_is_int(self):
        self.assertEqual(1, HexInt("0x1").__hash__())

    def test_equal_hex_str_is_equal_hash(self):
        self.assertEqual(HexInt("0x1").__hash__(), HexInt("0x1").__hash__())

    def test_unequal_hex_str_is_not_equal_hash(self):
        self.assertNotEqual(HexInt("0x1").__hash__(), HexInt("0x0").__hash__())

    def test_assert_hash_works_in_dict(self):
        self.assertEqual("1", {HexInt("0x0"): "1"}[HexInt("0x0")])


class BlockTestCase(unittest.TestCase):
    def test_equal_attrs_is_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertEqual(left, right)

    def test_different_number_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x50",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_hash_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="other hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_parent_hash_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="other parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_nonce_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="other nonce",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_sha3_uncles_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="other sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_logs_bloom_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x40",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_transaction_root_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="other transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_state_root_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="other state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_receipts_root_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="other receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_miner_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="other miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_mix_hash_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="other mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_difficulty_is_not_equal(self):
        left = Block(
            difficulty="0x10",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_total_difficulty_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="other total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_extra_data_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="other extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_size_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x60",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_gas_limit_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x20",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_gas_used_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x30",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_timestamp_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x70",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_transactions_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 2", "tx hash 3"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)

    def test_different_uncles_is_not_equal(self):
        left = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 2", "uncle hash 3"],
        )
        right = Block(
            difficulty="0x1",
            extra_data="extra",
            gas_limit="0x2",
            gas_used="0x3",
            hash="hash",
            logs_bloom="0x4",
            miner="miner",
            mix_hash="mix hash",
            nonce="0x5",
            number="0x5",
            parent_hash="parent hash",
            receipts_root="receipts root",
            sha3_uncles="sha3 uncles",
            size="0x6",
            state_root="state root",
            timestamp="0x7",
            total_difficulty="total difficulty",
            transactions=["tx hash 1", "tx hash 2"],
            transactions_root="transactions root",
            uncles=["uncle hash 1", "uncle hash 2"],
        )
        self.assertNotEqual(left, right)


class TransactionTestCase(unittest.TestCase):
    def test_equal_attributes_are_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertEqual(left, right)

    def test_different_block_hash_is_not_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="other block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)

    def test_different_block_number_is_not_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x91",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)

    def test_different_from_is_not_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="other from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)

    def test_different_gas_is_not_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x94",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)

    def test_different_gas_price_is_not_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x92",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)

    def test_different_hash_is_not_equal(self):
        left = Transaction(
            hash="other hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)

    def test_different_input_is_not_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="other input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)

    def test_different_nonce_is_not_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x95",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)

    def test_different_to_is_not_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="other to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)

    def test_different_transaction_index_is_not_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x92",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)

    def test_different_value_is_not_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x93",
            v="v",
            r="r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)

    def test_different_v_is_not_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="other v",
            r="r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)

    def test_different_r_is_not_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="other r",
            s="s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)

    def test_different_s_is_not_equal(self):
        left = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="other s",
        )
        right = Transaction(
            hash="hash",
            block_hash="block hash",
            block_number="0x1",
            from_="from",
            gas="0x4",
            gas_price="0x2",
            input="input",
            nonce="0x5",
            to_="to",
            transaction_index="0x2",
            value="0x3",
            v="v",
            r="r",
            s="s",
        )
        self.assertNotEqual(left, right)
