from unittest import TestCase

from chainconductor.web3.types import Log, TransactionReceipt


class LogTestCase(TestCase):
    def test_equal_values_are_equal(self):
        left = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertEqual(left, right, "Expected objects to be equal")

    def test_different_removed_is_unequal(self):
        left = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = Log(
            removed=False,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_log_index_is_unequal(self):
        left = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = Log(
            removed=True,
            log_index="0x11",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_transaction_index_is_unequal(self):
        left = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x22",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_transaction_hash_is_unequal(self):
        left = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="other tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_block_hash_is_unequal(self):
        left = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="other block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_block_number_is_unequal(self):
        left = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x33",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_address_is_unequal(self):
        left = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the other address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_data_is_unequal(self):
        left = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the other data",
            topics=["topic 1", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_topics_size_is_unequal(self):
        left = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")

    def test_different_topic_values_is_unequal(self):
        left = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 1", "topic 2"],
        )
        right = Log(
            removed=True,
            log_index="0x01",
            transaction_index="0x02",
            transaction_hash="tx hash",
            block_hash="block hash",
            block_number="0x03",
            address="the address",
            data="the data",
            topics=["topic 3", "topic 2"],
        )
        self.assertNotEqual(left, right, "Expected objects not to be equal")


class TransactionReceiptTestCase(TestCase):
    def test_equal_values_are_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertEqual(left, right, "Expected objects to be equal")

    def test_different_transaction_hash_is_not_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="other tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_transaction_index_is_not_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x0101",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_block_hash_is_not_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="other block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_block_number_is_not_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x0202",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_from_is_not_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="other from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_to_is_not_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="other to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_cumulative_gas_used_is_not_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x0303",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_gas_used_is_not_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x0404",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_contract_address_is_not_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the other contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_logs_is_not_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=False,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_logs_bloom_is_not_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the other logs bloom",
            root="the root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_root_is_not_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the other root",
            status="0x00",
        )
        self.assertNotEqual(left, right)

    def test_different_status_is_not_equal(self):
        left = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x00",
        )
        right = TransactionReceipt(
            transaction_hash="tx hash",
            transaction_index="0x01",
            block_hash="block hash",
            block_number="0x02",
            from_="from address",
            to_="to address",
            cumulative_gas_used="0x03",
            gas_used="0x04",
            contract_address="the contract address",
            logs=[
                Log(
                    removed=True,
                    log_index="0x01",
                    transaction_index="0x02",
                    transaction_hash="tx hash 1",
                    block_hash="block hash 1",
                    block_number="0x03",
                    address="the address 1",
                    data="the data 1",
                    topics=["topic 1.1", "topic 1.2"],
                ),
                Log(
                    removed=False,
                    log_index="0x11",
                    transaction_index="0x12",
                    transaction_hash="tx hash 2",
                    block_hash="block hash 2",
                    block_number="0x13",
                    address="the address 2",
                    data="the data 2",
                    topics=["topic 2.1", "topic 2.2"],
                ),
            ],
            logs_bloom="the logs bloom",
            root="the root",
            status="0x01",
        )
        self.assertNotEqual(left, right)
